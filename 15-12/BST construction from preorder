//constructing a binary from a given preorder//
#include <iostream>
using namespace std;

class node {
  public:
  int key;
  node* left;
  node* right;
};
// fuction to create a new node //
node * newNode(int k){
node* n = new node();
n->key = k;
n->left = NULL;
n->right = NULL;
return n;
}
//constructTreeUntil function 
node* construct(int pre[],int* preIndex,int low,int high,int size){
  //base  case//
  if(*preIndex>=size||low>high){
    return NULL;
  }
  //taking the 1st node as the reoot node and incrementing preIndex
  node* root = newNode(pre[*preIndex]);
  *preIndex = *preIndex+1;

  //checking the subarray //
  if(low==high){
    return root;
  }
  //if not search for the first element bigger than root
  int i;//definig the variable with global scope to store
  for(i=low;i<=high;++i){
    if(pre[i]>root->key){
      break;
    }
  }
  //recurrrrrrr after division 
  root->left = construct(pre, preIndex, *preIndex, i-1,size);
  root->right = construct(pre, preIndex, i, high, size);
  return root;
}


//main function utilising the function 
node* treefromPre(int pre[],int size){
  int preIndex = 0;
  return construct(pre, &preIndex, 0, size-1, size);
}

//inorder trav
void printInorder(node* n)
{
  if(n!=NULL){
    printInorder(n->left);
    cout<<n->key;
    printInorder(n->right);
  }
  else return;
}


//driver 
int main()
{
  int pre[]={/*put ur pre order trv here */};
  int size = sizeof(pre)/sizeof(pre[0]);
  node*root = treefromPre(pre, size);
  cout<<"indorder trav of the same pre :"<<endl;
  printInorder(root);
  return 0;
}
